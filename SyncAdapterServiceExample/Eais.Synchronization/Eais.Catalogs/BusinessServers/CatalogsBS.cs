//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Iis.Eais.Catalogs
{
    using System;


    // *** Start programmer edit section *** (Using statements)
    using System.Collections.Generic;
    using System.Linq;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using IIS.University.Tools;
    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// CatalogsBS.
    /// </summary>
    // *** Start programmer edit section *** (CatalogsBS CustomAttributes)

    // *** End programmer edit section *** (CatalogsBS CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class CatalogsBS : ICSSoft.STORMNET.Business.BusinessServer
    {

        // *** Start programmer edit section *** (CatalogsBS CustomMembers)

        // *** End programmer edit section *** (CatalogsBS CustomMembers)


        /// <summary>
        /// Проверяет есть ли такое проживание и возвращает существующее или null.
        /// </summary>
        // *** Start programmer edit section *** (CatalogsBS.CheckProzhivanie Iis.Eais.Catalogs.Prozhivanie CustomAttributes)
        /// <param name="UpdatedObject"> Проживание с которым сравниваем </param>
        // *** End programmer edit section *** (CatalogsBS.CheckProzhivanie Iis.Eais.Catalogs.Prozhivanie CustomAttributes)
        [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
        public virtual Prozhivanie CheckProzhivanie(Prozhivanie UpdatedObject)
        {
            // *** Start programmer edit section *** (CatalogsBS.CheckProzhivanie Iis.Eais.Catalogs.Prozhivanie method implementation)
            if (UpdatedObject.Territoriia == null)
            {
                throw new Exception("Территория не указана");
            }

            if (UpdatedObject == null)
            {
                throw new Exception("UpdatedObject равен null");
            }

            var lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(Prozhivanie), Prozhivanie.Views.ProzhivanieE);
            var funcs = new List<Function>();

            funcs.Add(FunctionBuilder.BuildEquals<Prozhivanie>(p => p.Territoriia, UpdatedObject.Territoriia));

            funcs.Add(UpdatedObject.Ulitca == null
                ? FunctionBuilder.BuildIsNull<Prozhivanie>(p => p.Ulitca)
                : FunctionBuilder.BuildEquals<Prozhivanie>(p => p.Ulitca, UpdatedObject.Ulitca));

            funcs.Add(UpdatedObject.Kvartira == null
                ? FunctionBuilder.BuildIsNull<Prozhivanie>(p => p.Kvartira)
                : FunctionBuilder.BuildEquals<Prozhivanie>(p => p.Kvartira, UpdatedObject.Kvartira));

            funcs.Add(UpdatedObject.NomerStroeniia == null
                ? FunctionBuilder.BuildIsNull<Prozhivanie>(p => p.NomerStroeniia)
                : FunctionBuilder.BuildEquals<Prozhivanie>(p => p.NomerStroeniia, UpdatedObject.NomerStroeniia));

            funcs.Add(FunctionBuilder.BuildEquals<Prozhivanie>(x => x.NomerDoma, UpdatedObject.NomerDoma));

            lcs.LimitFunction = FunctionBuilder.BuildAnd(funcs);
            lcs.ReturnTop = 1;
            var dobj = DataService.LoadObjects(lcs).Cast<Prozhivanie>();

            return dobj.FirstOrDefault();
            // *** End programmer edit section *** (CatalogsBS.CheckProzhivanie Iis.Eais.Catalogs.Prozhivanie method implementation)
        }

        /// <summary>
        /// Проверит есть ли такое проживание, если нет то создаст.
        /// </summary>
        // *** Start programmer edit section *** (CatalogsBS.GetProzhivanie Iis.Eais.Catalogs.Prozhivanie CustomAttributes)

        // *** End programmer edit section *** (CatalogsBS.GetProzhivanie Iis.Eais.Catalogs.Prozhivanie CustomAttributes)
        [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
        public virtual Iis.Eais.Catalogs.Prozhivanie GetProzhivanie(Iis.Eais.Catalogs.Prozhivanie vProzhivanie)
        {
            // *** Start programmer edit section *** (CatalogsBS.GetProzhivanie Iis.Eais.Catalogs.Prozhivanie method implementation)
            var result = CheckProzhivanie(vProzhivanie);
            if (result == null)
            {
                vProzhivanie.__PrimaryKey = Guid.NewGuid().ToString();
                if (vProzhivanie.Ulitca != null)
                {
                    DataService.LoadObject(vProzhivanie.Ulitca);
                }
                DataService.LoadObject(vProzhivanie.Territoriia);
                DataService.UpdateObject(vProzhivanie);
                result = vProzhivanie;
            }
            return result;
            // *** End programmer edit section *** (CatalogsBS.GetProzhivanie Iis.Eais.Catalogs.Prozhivanie method implementation)
        }

        /// <summary>
        /// Возвращает наибольший OldId + 1 в таблице.
        /// </summary>
        /// <param name="Obj">Объект.</param>
        // *** Start programmer edit section *** (CatalogsBS.MakeIdIfEmpty ICSSoft.STORMNET.DataObject CustomAttributes)

        // *** End programmer edit section *** (CatalogsBS.MakeIdIfEmpty ICSSoft.STORMNET.DataObject CustomAttributes)
        [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
        public virtual int MakeIdIfEmpty(ICSSoft.STORMNET.DataObject Obj)
        {
            // *** Start programmer edit section *** (CatalogsBS.MakeIdIfEmpty ICSSoft.STORMNET.DataObject method implementation)            
            Type type = Obj.GetType();
            var result = (int)type.GetProperty("Oldid").GetValue(Obj);

            if (result == 0 && Obj.GetStatus() == ObjectStatus.Created)
            {
                int newId = 1;
                var dataService = DataServiceProvider.DataService;
                View view = new View();
                view.DefineClassType = type;
                view.AddProperty("Oldid");
                var lcs = LoadingCustomizationStruct.GetSimpleStruct(type, view);
                ColumnsSortDef cs = new ColumnsSortDef
                {
                    Name = "Oldid",
                    Sort = SortOrder.Desc
                };
                lcs.AddColumnSort(cs);
                lcs.ReturnTop = 1;

                var listLeechnost = new List<String>();
                var dobj = dataService.LoadObjects(lcs);
                result = (int)type.GetProperty("Oldid").GetValue(dobj[0]) + 1;
            }

            return result;

            // *** End programmer edit section *** (CatalogsBS.MakeIdIfEmpty ICSSoft.STORMNET.DataObject method implementation)
        }

        // *** Start programmer edit section *** (OnUpdatePrichinaSnyatiya CustomAttributes)

        // *** End programmer edit section *** (OnUpdatePrichinaSnyatiya CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdatePrichinaSnyatiya(Iis.Eais.Catalogs.PrichinaSnyatiya UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdatePrichinaSnyatiya)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdatePrichinaSnyatiya)
        }

        // *** Start programmer edit section *** (OnUpdateLgotaDliaKat CustomAttributes)

        // *** End programmer edit section *** (OnUpdateLgotaDliaKat CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateLgotaDliaKat(Iis.Eais.Catalogs.LgotaDliaKat UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateLgotaDliaKat)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateLgotaDliaKat)
        }

        // *** Start programmer edit section *** (OnUpdatePrichinaPeremeshcheniia CustomAttributes)

        // *** End programmer edit section *** (OnUpdatePrichinaPeremeshcheniia CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdatePrichinaPeremeshcheniia(Iis.Eais.Catalogs.PrichinaPeremeshcheniia UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdatePrichinaPeremeshcheniia)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdatePrichinaPeremeshcheniia)
        }

        // *** Start programmer edit section *** (OnUpdateStrana CustomAttributes)

        // *** End programmer edit section *** (OnUpdateStrana CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateStrana(Iis.Eais.Catalogs.Strana UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateStrana)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateStrana)
        }

        // *** Start programmer edit section *** (OnUpdateRodstvOtn CustomAttributes)

        // *** End programmer edit section *** (OnUpdateRodstvOtn CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateRodstvOtn(Iis.Eais.Catalogs.RodstvOtn UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateRodstvOtn)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateRodstvOtn)
        }

        // *** Start programmer edit section *** (OnUpdateSpecialist CustomAttributes)

        // *** End programmer edit section *** (OnUpdateSpecialist CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateSpecialist(Iis.Eais.Catalogs.Specialist UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateSpecialist)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateSpecialist)
        }

        // *** Start programmer edit section *** (OnUpdateNormAkt CustomAttributes)

        // *** End programmer edit section *** (OnUpdateNormAkt CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateNormAkt(Iis.Eais.Catalogs.NormAkt UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateNormAkt)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateNormAkt)
        }

        // *** Start programmer edit section *** (OnUpdateProzhivanie CustomAttributes)

        // *** End programmer edit section *** (OnUpdateProzhivanie CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateProzhivanie(Iis.Eais.Catalogs.Prozhivanie UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateProzhivanie)
            if ((UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Altered) ||
        (UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Created))
            {
                if (UpdatedObject.IsAlteredProperty<Prozhivanie>(p => p.NomerDoma) ||
                    UpdatedObject.IsAlteredProperty<Prozhivanie>(p => p.NomerStroeniia) ||
                    UpdatedObject.IsAlteredProperty<Prozhivanie>(p => p.Kvartira) ||
                    UpdatedObject.IsAlteredProperty<Prozhivanie>(p => p.Ulitca) ||
                    UpdatedObject.IsAlteredProperty<Prozhivanie>(p => p.Territoriia))
                {
                    if (CheckProzhivanie(UpdatedObject) != null)
                    {
                        throw new Exception("Проживание с идентичными атрибутами существует.");
                    };
                }
            }
            return new ICSSoft.STORMNET.DataObject[] { };
            // *** End programmer edit section *** (OnUpdateProzhivanie)
        }

        // *** Start programmer edit section *** (OnUpdateVidUdostDok CustomAttributes)

        // *** End programmer edit section *** (OnUpdateVidUdostDok CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateVidUdostDok(Iis.Eais.Catalogs.VidUdostDok UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateVidUdostDok)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateVidUdostDok)
        }

        // *** Start programmer edit section *** (OnUpdateOrganVydDok CustomAttributes)

        // *** End programmer edit section *** (OnUpdateOrganVydDok CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateOrganVydDok(Iis.Eais.Catalogs.OrganVydDok UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateOrganVydDok)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateOrganVydDok)
        }
    }
}
