//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Iis.Eais.Catalogs
{
    using System;


    // *** Start programmer edit section *** (Using statements)
    using ICSSoft.STORMNET;

    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// PeriodBS.
    /// </summary>
    // *** Start programmer edit section *** (PeriodBS CustomAttributes)

    // *** End programmer edit section *** (PeriodBS CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class PeriodBS : ICSSoft.STORMNET.Business.BusinessServer
    {

        // *** Start programmer edit section *** (PeriodBS CustomMembers)

        // *** End programmer edit section *** (PeriodBS CustomMembers)


        // *** Start programmer edit section *** (OnUpdatePeriod CustomAttributes)
        private bool StartWithYear = false;

        // *** End programmer edit section *** (OnUpdatePeriod CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdatePeriod(Iis.Eais.Catalogs.Period UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdatePeriod)
            UpdatedObject.Oldid = new CatalogsBS().MakeIdIfEmpty(UpdatedObject);

            if (UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Created)
            {
                Period vПериод;
                vПериод = UpdatedObject;

                if (vПериод.Ierarhiia == null)
                {
                    if (vПериод.Znachenie < 1900 || vПериод.Znachenie > 2070)
                    {
                        throw new Exception("Значение не принадлежит диапазону 1900 - 2070");
                    }

                    vПериод.Tip = tTipPerioda.God;
                    vПериод.Naimenovanie = vПериод.Znachenie + " год";
                    //начало = 1 января
                    DateTime January1;
                    January1 = new DateTime((int)vПериод.Znachenie, 1, 1);
                    vПериод.DataNachala = January1;
                    //конец = 31 декабря
                    DateTime December31;
                    December31 = new DateTime((int)vПериод.Znachenie, 12, 31);
                    vПериод.DataKontca = December31;
                }

                // Создать вложеннеые периоды.
                System.Collections.ArrayList ArrList = new System.Collections.ArrayList();
                UpdatedObject.CreateIncludedPeriods(ArrList);
                DataObject[] returnObject = new DataObject[ArrList.Count];
                for (int i = 0; i < ArrList.Count; i++)
                {
                    Period period;
                    period = (Period)ArrList[i];
                    period.SetStatus(ObjectStatus.Created);
                    returnObject[i] = period;
                }
                return returnObject;
            }

            if (UpdatedObject.GetStatus() == ICSSoft.STORMNET.ObjectStatus.Deleted)
            {
                if (UpdatedObject.Ierarhiia == null)
                {
                    StartWithYear = true;
                    System.Collections.ArrayList ArrList = new System.Collections.ArrayList();
                    UpdatedObject.LoadВложенныеПериоды(ArrList);
                    DataObject[] returnObject = new DataObject[ArrList.Count];
                    for (int i = 0; i < ArrList.Count; i++)
                    {
                        Period period;
                        period = (Period)ArrList[i];
                        period.SetStatus(ObjectStatus.Deleted);
                        returnObject[i] = period;
                    }
                    return returnObject;
                }
            }

            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdatePeriod)
        }
    }
}
