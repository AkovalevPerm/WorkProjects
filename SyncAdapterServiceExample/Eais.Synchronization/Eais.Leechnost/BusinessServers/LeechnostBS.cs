//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Iis.Eais.Leechnost
{
    using System;


    // *** Start programmer edit section *** (Using statements)
    using System.Collections.Generic;
    using System.Data;
    using System.Linq;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using Iis.Eais.Leechnost.Helpers;
    using IIS.University.Tools;
    using Iis.Eais.Common.Errors;
    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// LeechnostBS.
    /// </summary>
    // *** Start programmer edit section *** (LeechnostBS CustomAttributes)
    
    // *** End programmer edit section *** (LeechnostBS CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class LeechnostBS : Iis.Eais.Common.CommonBS
    {

        // *** Start programmer edit section *** (LeechnostBS CustomMembers)
        public override List<IError> CanDelete(Type type, Guid objectId)
        {
            List<IError> errors = new List<IError>();

            // Проверка связанных объектов по списку
            errors.AddRange(CheckRelationsBeforDelete(objectId, RelationsToCheckBeforeDelete.Leechnost));

            // Проверка наличия связанных ЛгКатЛичности
            var lgKatLeechLcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(LgKatLeechnosti), LgKatLeechnosti.Views.LgKatLeechnostiE);
            lgKatLeechLcs.LimitFunction = FunctionBuilder.BuildEquals<LgKatLeechnosti>(p => p.Leechnost, objectId);

            var lgKatobjects = DataServiceProvider.DataService.LoadObjects(lgKatLeechLcs);

            if (lgKatobjects.Length > 0)
            {
                foreach ( var lgKat in lgKatobjects)
                {
                    LgKatLeechnostiBS lgBS = new LgKatLeechnostiBS();
                    Guid guid = new Guid(lgKat.__PrimaryKey.ToString());
                    var detailErrors = lgBS.CanDelete(typeof(LgKatLeechnosti), guid);
                    if (detailErrors.Count > 0)
                    {
                        errors.AddRange(detailErrors);
                        break;
                    }
                }
            };

            return errors;
        }

        /// <summary>
        /// Получить функцию для фильтрации по состоянию учета личности и Органу СЗ
        /// </summary>
        /// <param name="uchetType">Состояние учета личности</param>
        /// <param name="oSZId">Ид органа СЗ</param>
        /// <param name="leechnostFieldName">Название поля типа Личность</param>
        public static Function GetSQLLimitByOSZandUchetType(string uchetType, Guid oSZId, string leechnostFieldName)
        {
            string sql = string.Empty;

            if (oSZId.Equals(Guid.Empty) && uchetType.Equals("All"))
            {
                return FunctionBuilder.BuildTrue();
            }

            string ulLeechnostField = nameof(UchetLeechnosti.Leechnost);
            sql = $"{leechnostFieldName} in (select {ulLeechnostField} from UchetLeechnosti where ";

            if (!oSZId.Equals(Guid.Empty))
            {
                sql += $"{nameof(UchetLeechnosti.OrganSZ)} ='{oSZId}'";

                if (!uchetType.Equals("All"))
                {
                    sql += " and ";
                }
            }

            string dataSnyat = nameof(UchetLeechnosti.DataSnyatSUcheta);
            string nowDateStr = DateTime.Now.ToString("yyyy-MM-dd");

            if (uchetType.Equals("NaUchete"))
            {
                sql += $"coalesce({dataSnyat}, '2100-01-01')>'{nowDateStr}'";
            }
            else if (uchetType.Equals("NeNaUchete"))
            {
                sql += $"coalesce({dataSnyat}, '2100-01-01')<='{nowDateStr}'";
            }
            
            sql += ")";

            return FunctionBuilder.BuildSQL(sql);
        }

        public static Function GetLiminByOSZ(string uchetType, Guid oSZId)
        {
            Function oSZIdLF = null;
            Function uchetTypeLF = null;
            Function resultLF = null;

            if (oSZId.Equals(Guid.Empty) && uchetType.Equals("All"))
            {
                return FunctionBuilder.BuildTrue();
            }
            else
            {
                if (!oSZId.Equals(Guid.Empty))
                {
                    oSZIdLF = FunctionBuilder.BuildEquals(nameof(UchetLeechnosti.OrganSZ), oSZId);
                }

                if (uchetType.Equals("NaUchete"))
                {
                    uchetTypeLF = FunctionBuilder.BuildOr(
                        FunctionBuilder.BuildIsNull(nameof(UchetLeechnosti.DataSnyatSUcheta)),
                        FunctionBuilder.BuildGreater(nameof(UchetLeechnosti.DataSnyatSUcheta), DateTime.Now)
                    );
                }
                else if (uchetType.Equals("NeNaUchete"))
                {
                    uchetTypeLF = FunctionBuilder.BuildAnd(
                        FunctionBuilder.BuildIsNotNull(nameof(UchetLeechnosti.DataSnyatSUcheta)),
                        FunctionBuilder.BuildLessOrEqual(nameof(UchetLeechnosti.DataSnyatSUcheta), DateTime.Now)
                    );
                }

                if (oSZIdLF != null && uchetTypeLF != null)
                {
                    resultLF = FunctionBuilder.BuildAnd(oSZIdLF, uchetTypeLF);
                }
                else
                {
                    resultLF = oSZIdLF ?? uchetTypeLF;
                }

            }

            var view = new View();
            view.DefineClassType = typeof(UchetLeechnosti);
            view.AddProperty(nameof(UchetLeechnosti.OrganSZ));
            view.AddProperty(nameof(UchetLeechnosti.Leechnost));
            view.AddProperty(nameof(UchetLeechnosti.DataSnyatSUcheta));

            return FunctionBuilder.BuildExists(nameof(UchetLeechnosti.Leechnost), view, resultLF);
        }

        /// <summary>
        /// Вернуть иды личностей, стоящих на учете, из указанного массива идов личностей
        /// </summary>
        /// <param name="leechnostIds">Массив идов личностей</param>
        public static Guid[] GetLeechnostiNaUchete(Guid[] leechnostIds)
        {
            List<Guid> ids = new List<Guid>();

            if (leechnostIds.Length == 0)
            {
                return new Guid[] { };
            }


            var leechnostLF = FunctionBuilder.BuildIn(
                nameof(UchetLeechnosti.Leechnost),
                ICSSoft.STORMNET.FunctionalLanguage.SQLWhere.SQLWhereLanguageDef.LanguageDef.GuidType,
                leechnostIds);

            var naUcheteLF = FunctionBuilder.BuildOr(
                FunctionBuilder.BuildIsNull(nameof(UchetLeechnosti.DataSnyatSUcheta)),
                FunctionBuilder.BuildGreater(nameof(UchetLeechnosti.DataSnyatSUcheta), DateTime.Now)
            );

            var resultLF = FunctionBuilder.BuildAnd(leechnostLF, naUcheteLF);

            View view = new View();
            view.DefineClassType = typeof(UchetLeechnosti);
            view.AddProperties(nameof(UchetLeechnosti.Leechnost), nameof(UchetLeechnosti.DataSnyatSUcheta));

            SQLDataService dataService = DataServiceProvider.DataService as SQLDataService;
            LoadingCustomizationStruct lcs = LoadingCustomizationStruct.GetSimpleStruct(typeof(UchetLeechnosti), view);
            lcs.LimitFunction = resultLF;

            List<UchetLeechnosti> listUchetLeechnosti = dataService.LoadObjects(lcs).Cast<UchetLeechnosti>().ToList();

            Guid newGuid;
            foreach (UchetLeechnosti uchet in listUchetLeechnosti)
            {
                newGuid = Guid.Parse(uchet.Leechnost.__PrimaryKey.ToString());

                if (!ids.Contains(newGuid))
                {
                    ids.Add(newGuid);
                }
            }

            return ids.ToArray();
        }

        /// <summary>
        /// Получить список идов льгот для указанной личности
        /// </summary>
        /// <param name="leechnostId">Идентификатор личности</param>
        /// <returns>Список идов льгот для всех льготных категорий личности</returns>
        public static Guid[] GetLgotaListForLeechnost(Guid leechnostId)
        {
            List<Guid> lgotas = new List<Guid>();

            if (leechnostId == null)
            {
                return new Guid[] { };
            }

            string sql =
$@"SELECT DISTINCT LDK.lgota
FROM public.lgkatleechnosti LKL
INNER JOIN public.lgotKat LK ON LK.primarykey = LKL.lgotKat
INNER JOIN public.lgotaDliaKat LDK ON LK.primarykey = LDK.Kategoriia 
WHERE (LKL.dataOtmeny IS NULL OR LKL.dataOtmeny > GETDATE())
AND LKL.leechnost = '{leechnostId}'";

            IDbConnection dbConn = null;
            IDataReader dataReader = null;

            try
            {
                // Получаем коннекцию к базе данных и открываем соединение
                PostgresDataService DataSrv = (PostgresDataService)DataServiceProvider.DataService;
                dbConn = DataSrv.GetConnection();
                dbConn.Open();

                // Создаем команду и выполняем ее
                var comm = dbConn.CreateCommand();
                comm.CommandText = sql;
                dataReader = comm.ExecuteReader();

                // Перегоняем результат запроса в массив
                while (dataReader.Read())
                {
                    lgotas.Add(Guid.Parse(dataReader.GetValue(0).ToString()));
                }
            }
            finally
            {
                if (dataReader != null) dataReader.Close();
                if (dbConn != null) dbConn.Close();
            }

            return lgotas.ToArray();
        }

        /// <summary>
        /// Получить список идов льгот для указанной льготной категории
        /// </summary>
        /// <param name="lgotKatId">Идентификатор льготной категории</param>
        /// <returns>Список идов льгот для льготной категории</returns>
        public static Guid[] GetLgotaListForLgotKat(Guid lgotKatId)
        {
            List<Guid> lgotas = new List<Guid>();

            if (lgotKatId == null)
            {
                return new Guid[] { };
            }

            string sql =
$@"SELECT DISTINCT LDK.lgota
FROM public.lgkatleechnosti LKL
INNER JOIN public.lgotKat LK ON LK.primarykey = LKL.lgotKat
INNER JOIN public.lgotaDliaKat LDK ON LK.primarykey = LDK.Kategoriia 
WHERE LK.primarykey='{lgotKatId}'
AND (LKL.dataOtmeny IS NULL OR LKL.dataOtmeny > GETDATE())";

            IDbConnection dbConn = null;
            IDataReader dataReader = null;

            try
            {
                // Получаем коннекцию к базе данных и открываем соединение
                PostgresDataService DataSrv = (PostgresDataService)DataServiceProvider.DataService;
                dbConn = DataSrv.GetConnection();
                dbConn.Open();

                // Создаем команду и выполняем ее
                var comm = dbConn.CreateCommand();
                comm.CommandText = sql;
                dataReader = comm.ExecuteReader();

                // Перегоняем результат запроса в массив
                while (dataReader.Read())
                {
                    lgotas.Add(Guid.Parse(dataReader.GetValue(0).ToString()));
                }
            }
            finally
            {
                if (dataReader != null) dataReader.Close();
                if (dbConn != null) dbConn.Close();
            }

            return lgotas.ToArray();
        }

        /// <summary>
        /// Получить список льготных категорий личности по иду личности, имеющих указанную льготу
        /// </summary>
        /// <param name="leechnostId">Идентификатор личности</param>
        /// <param name="lgotaId">Идентификатор льготы</param>
        /// <returns>Список идов льготных категорий личности</returns>
        public static Guid[] GetLgotKatLeechnostiListForLeechnost(Guid leechnostId, Guid lgotaId)
        {
            List<Guid> lgotas = new List<Guid>();

            if (leechnostId == null || lgotaId == null)
            {
                return new Guid[] { };
            }

            string sql =
$@"select distinct LKL.primarykey
from LgKatLeechnosti LKL
inner join LgotKat LK on LK.primarykey=LKL.lgotKat
inner join LgotaDliaKat LDK on LDK.kategoriia=LK.primarykey
where LKL.leechnost='{leechnostId}'
and LDK.lgota='{lgotaId}'";

            IDbConnection dbConn = null;
            IDataReader dataReader = null;

            try
            {
                // Получаем коннекцию к базе данных и открываем соединение
                PostgresDataService DataSrv = (PostgresDataService)DataServiceProvider.DataService;
                dbConn = DataSrv.GetConnection();
                dbConn.Open();

                // Создаем команду и выполняем ее
                var comm = dbConn.CreateCommand();
                comm.CommandText = sql;
                dataReader = comm.ExecuteReader();

                // Перегоняем результат запроса в массив
                while (dataReader.Read())
                {
                    lgotas.Add(Guid.Parse(dataReader.GetValue(0).ToString()));
                }
            }
            finally
            {
                if (dataReader != null) dataReader.Close();
                if (dbConn != null) dbConn.Close();
            }

            return lgotas.ToArray();
        }
        // *** End programmer edit section *** (LeechnostBS CustomMembers)


        // *** Start programmer edit section *** (OnUpdateLeechnost CustomAttributes)

        // *** End programmer edit section *** (OnUpdateLeechnost CustomAttributes)
        public virtual ICSSoft.STORMNET.DataObject[] OnUpdateLeechnost(Iis.Eais.Leechnost.Leechnost UpdatedObject)
        {
            // *** Start programmer edit section *** (OnUpdateLeechnost)
            return new ICSSoft.STORMNET.DataObject[0];
            // *** End programmer edit section *** (OnUpdateLeechnost)
        }
    }
}
