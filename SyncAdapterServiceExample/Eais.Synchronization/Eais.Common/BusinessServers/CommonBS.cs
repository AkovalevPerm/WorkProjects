//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Iis.Eais.Common
{
    using System;
    using System.Xml;


    // *** Start programmer edit section *** (Using statements)
    using Iis.Eais.Common.Errors;
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Business;
    using IIS.University.Tools;
    using System.Collections.Generic;
    using Iis.Eais.Common.CurrentUserService;
    using ICSSoft.STORMNET.UserDataTypes;
    using System.Diagnostics;

    // *** End programmer edit section *** (Using statements)


    /// <summary>
    /// CommonBS.
    /// </summary>
    // *** Start programmer edit section *** (CommonBS CustomAttributes)

    // *** End programmer edit section *** (CommonBS CustomAttributes)
    [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
    public class CommonBS : ICSSoft.STORMNET.Business.BusinessServer
    {

        // *** Start programmer edit section *** (CommonBS CustomMembers)
        /// <summary>
        /// Параметры ограничения для проверки связи перед удалением
        /// </summary>
        public struct Limits
        {
            /// <summary>
            /// Тип объекта
            /// </summary>
            public Type ObjectType { get; set; }
            /// <summary>
            /// Имя объекта для вывода сообщения
            /// </summary>
            public string Name { get; set; }
            /// <summary>
            /// Название связи
            /// </summary>
            public string Relation { get; set; }
        }

        /// <summary>
        /// Проверка связей перед удалением
        /// </summary>
        /// <param name="objectId">PrimaryKey</param>
        /// <param name="limits">Связи для проверки</param>
        /// <returns></returns>
        public List<IError> CheckRelationsBeforDelete(object objectId, Limits[] limits)
        {
            List<IError> errors = new List<IError>();
            var LimitsIndex = 0;
            foreach (var limit in limits)
            {
                if (limit.Name != null)
                {
                    var view = new View();
                    view.DefineClassType = limit.ObjectType;
                    view.AddProperty(limit.Relation);
                    var tLcs = LoadingCustomizationStruct.GetSimpleStruct(limit.ObjectType, view);
                    tLcs.LimitFunction = FunctionBuilder.BuildEquals(limit.Relation, objectId);

                    // Поиск одинаковых мастеров для составления одного запроса 
                    for (var iLimitsSameType = LimitsIndex; iLimitsSameType < limits.Length; iLimitsSameType++)
                    {
                        var limitsSameType = limits[iLimitsSameType];
                        if (limitsSameType.ObjectType == limit.ObjectType && !limit.Equals(limitsSameType))
                        {
                            view.AddProperty(limitsSameType.Relation);
                            tLcs.View = view;
                            tLcs.LimitFunction = FunctionBuilder.BuildOr(tLcs.LimitFunction, FunctionBuilder.BuildEquals(limitsSameType.Relation, objectId));
                            limits[iLimitsSameType].Name = null;
                        }
                    }
                    tLcs.ReturnTop = 1;

                    if (DataServiceProvider.DataService.GetObjectsCount(tLcs) > 0)
                    {
                        errors.Add(new ForeignKeyConstraintError(limit.ObjectType, "\"" + limit.Name + "\""));
                    };
                }
                LimitsIndex++;
            }
            return errors;
        }
        // *** End programmer edit section *** (CommonBS CustomMembers)

        /// <summary>
        /// Возвращает список ошибок при невозможности удалить сущность.
        /// </summary>
        /// <param name="type">Тип удаляемой сущности.</param>
        /// <param name="objectId">Первичный ключ удаляемой сущности.</param>
        // *** Start programmer edit section *** (CommonBS.CanDelete System.Type System.Guid CustomAttributes)

        // *** End programmer edit section *** (CommonBS.CanDelete System.Type System.Guid CustomAttributes)
        [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
        public virtual System.Collections.Generic.List<IError> CanDelete(System.Type type, System.Guid objectId)
        {
            // *** Start programmer edit section *** (CommonBS.CanDelete System.Type System.Guid method implementation)
            return new System.Collections.Generic.List<IError>();
            // *** End programmer edit section *** (CommonBS.CanDelete System.Type System.Guid method implementation)
        }

        /// <summary>
        /// Сохраняет ошибку в логи.
        /// </summary>
        /// <param name="ex">Ошибка.</param>
        // *** Start programmer edit section *** (CommonBS.LogError System.Exception CustomAttributes)

        // *** End programmer edit section *** (CommonBS.LogError System.Exception CustomAttributes)
        [ICSSoft.STORMNET.AccessType(ICSSoft.STORMNET.AccessType.none)]
        public virtual void LogError(System.Exception ex)
        {
            // *** Start programmer edit section *** (CommonBS.LogError method implementation)
            if (ex == null)
            {
                return;
            }

            Exception innerEx = ex;

            while (innerEx.InnerException != null && !String.IsNullOrEmpty(innerEx.InnerException.Message))
            {
                innerEx = innerEx.InnerException;
            }

            ApplicationLog log = new ApplicationLog
            {
                Title = EaisCurrentUser.Instance.User.Login,
                Message = innerEx.Message,
                MachineName = Environment.MachineName,
                AppDomainName = Environment.UserDomainName,
                ProcessId = Process.GetCurrentProcess().Id.ToString(),
                ProcessName = Process.GetCurrentProcess().ProcessName,
                FormattedMessage = ex.StackTrace,
                ThreadName = ex.GetType().FullName,
                TimeStamp = (NullableDateTime)DateTime.Now
            };

            IDataService ds = DataServiceProvider.DataService;
            ds.UpdateObject(log);

            return;
            // *** End programmer edit section *** (CommonBS.LogError method implementation)
        }
    }
}
