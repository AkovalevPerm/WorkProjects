//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------


using System.Linq;
using Microsoft.Practices.ObjectBuilder2;

namespace SimpleTestAuditProject
{
    using System;
    using System.Xml;
    using System.Drawing;
    using System.Collections;
    using System.ComponentModel;
    using System.Windows.Forms;


    // *** Start programmer edit section *** (Using statements)
    using AuditUtils;
    using System.Collections.Generic;
    using ICSSoft.STORMNET;
    using IIS.University.Tools;
    using DataObject = ICSSoft.STORMNET.DataObject;

    // *** End programmer edit section *** (Using statements)


    // *** Start programmer edit section *** (WinformShowAuditFormU CustomAttributes)

    // *** End programmer edit section *** (WinformShowAuditFormU CustomAttributes)
    public class WinformShowAuditFormU : System.Windows.Forms.Form, SimpleTestAuditProject.DPDIShowAuditFormU
    {
        
        // *** Start programmer edit section *** (Form Designer Fields)
        private Button button1;
        private DateTimePicker dateTimePicker1;
        private DateTimePicker dateTimePicker2;
        private TreeView treeView1;
        private TextBox textBox1;
        private CheckBox checkBox1;
        private Button button2;

        // *** End programmer edit section *** (Form Designer Fields)
        private System.ComponentModel.IContainer components = null;

        // *** Start programmer edit section *** (WinformShowAuditFormU CustomMembers)
        private TreeNode CreateTreeNodeForAuditChange(AuditChange change)
        {
            TreeNode newTreeNode = null;
            if (change != null)
            {
                var childNode = new List<TreeNode>();
                change.FieldsChanges.ForEach(x => childNode.Add(new TreeNode($"Field {x.Key} = {x.Value}")));
                if (change.MastersChanges.Any())
                {
                    var mastersNode = new List<TreeNode>();
                    change.MastersChanges.ForEach(x =>
                    {
                        var newMasterNode = CreateTreeNodeForAuditChange(x.Value);
                        newMasterNode.Text = $"Master {x.Key} = {newMasterNode.Text}";
                        mastersNode.Add(newMasterNode);
                    });
                    childNode.Add(new TreeNode("Masters", mastersNode.ToArray()));
                }

                if (change.DetailsChanges.Any())
                {
                    var detailsNode = new List<TreeNode>();
                    change.DetailsChanges.ForEach(x =>
                    {
                        var newDetailNode = CreateTreeNodeForAuditChange(x.Value);
                        newDetailNode.Text = $"Detail {x.Key} = {newDetailNode.Text}";
                        detailsNode.Add(newDetailNode);
                    });
                    childNode.Add(new TreeNode("Details", detailsNode.ToArray()));
                }

                newTreeNode =
                    new TreeNode($"PK = {change.ObjPrimaryKey}; Operation = {change.Operation}; Type = {change.Type};",
                        childNode.ToArray());
            }
            else
            {
                newTreeNode = new TreeNode("NULL");
            }

            return newTreeNode;
        }

        private List<TreeNode> CreateTreeNodeForDataObject(DataObject obj)
        {
            var childNode = new List<TreeNode>();
            if (obj != null)
            {
                var objType = obj.GetType();
                var objProperties = objType.GetProperties();
                foreach (var property in objProperties)
                {
                    var typeprop = property.PropertyType;
                    if (typeprop.IsSubclassOf(typeof(DataObject)))
                    {
                        //Перебираем все мастера
                        var masterValue = property.GetValue(obj) as DataObject;
                        var masterChildNode = CreateTreeNodeForDataObject(property.GetValue(obj) as DataObject).ToArray();
                        childNode.Add(new TreeNode($"Master {property.Name}", masterChildNode));
                    }
                    else if (typeprop.IsSubclassOf(typeof(DetailArray)))
                    {
                        //Перебираем все детейлы
                        var detailValue = property.GetValue(obj) as DetailArray;
                        var detailObjects = detailValue.GetAllObjects();
                        var detailChildFieilds = new List<TreeNode>();
                        var detailChildObj = new List<TreeNode>{};
                        if (detailObjects.Any())
                        {
                            foreach (var dataObject in detailObjects)
                            {
                                var currentObj = dataObject;
                                detailChildFieilds = CreateTreeNodeForDataObject(currentObj);
                                detailChildObj.Add(new TreeNode($"Detail Obj - {currentObj.__PrimaryKey}",
                                    detailChildFieilds.ToArray()));
                            }
                        }
                        else
                        {
                            detailChildObj.Add(new TreeNode("NULL"));
                        }

                        childNode.Add(new TreeNode($"Detail {property.Name}", detailChildObj.ToArray()));
                    }
                    else
                    {
                        childNode.Add(new TreeNode($"Field {property.Name} = {property.GetValue(obj)}"));
                    }
                }
            }
            else
            {
                childNode.Add(new TreeNode("NULL"));
            }

            return childNode;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            treeView1.Nodes.Clear();
            var auditChanges = AuditHelper.GetChangesByPeriodByType(dateTimePicker1.Value, dateTimePicker2.Value, textBox1.Text, checkBox1.Checked);
            foreach (var auditChange in auditChanges)
            {
                treeView1.Nodes.Add(CreateTreeNodeForAuditChange(auditChange));
            }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            treeView1.Nodes.Clear();
            var obj = PKHelper.CreateObjectsByKey<MainObj>(textBox1.Text).FirstOrDefault() as DataObject;
            AuditHelper.GetObjForDate(dateTimePicker1.Value, ref obj, null, false);
            treeView1.Nodes.Add(new TreeNode($"Obj - {obj.__PrimaryKey} on date {dateTimePicker1.Value:G}", CreateTreeNodeForDataObject(obj).ToArray()));
        }
        // *** End programmer edit section *** (WinformShowAuditFormU CustomMembers)

        
        public WinformShowAuditFormU()
        {
            this.InitializeComponent();
            // *** Start programmer edit section *** (Form Constructor)

            // *** End programmer edit section *** (Form Constructor)
        }
        
        // *** Start programmer edit section *** (Form Designer Initialize)
        private void InitializeComponent()
        {
            this.button1 = new System.Windows.Forms.Button();
            this.dateTimePicker1 = new System.Windows.Forms.DateTimePicker();
            this.dateTimePicker2 = new System.Windows.Forms.DateTimePicker();
            this.treeView1 = new System.Windows.Forms.TreeView();
            this.textBox1 = new System.Windows.Forms.TextBox();
            this.checkBox1 = new System.Windows.Forms.CheckBox();
            this.button2 = new System.Windows.Forms.Button();
            this.SuspendLayout();
            // 
            // button1
            // 
            this.button1.Location = new System.Drawing.Point(13, 13);
            this.button1.Name = "button1";
            this.button1.Size = new System.Drawing.Size(75, 23);
            this.button1.TabIndex = 0;
            this.button1.Text = "button1";
            this.button1.UseVisualStyleBackColor = true;
            this.button1.Click += new System.EventHandler(this.button1_Click);
            // 
            // dateTimePicker1
            // 
            this.dateTimePicker1.CustomFormat = "yyyy.MM.dd HH:mm:ss";
            this.dateTimePicker1.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dateTimePicker1.Location = new System.Drawing.Point(104, 16);
            this.dateTimePicker1.Name = "dateTimePicker1";
            this.dateTimePicker1.Size = new System.Drawing.Size(141, 20);
            this.dateTimePicker1.TabIndex = 1;
            // 
            // dateTimePicker2
            // 
            this.dateTimePicker2.CustomFormat = "yyyy.MM.dd HH:mm:ss";
            this.dateTimePicker2.Format = System.Windows.Forms.DateTimePickerFormat.Custom;
            this.dateTimePicker2.Location = new System.Drawing.Point(262, 16);
            this.dateTimePicker2.Name = "dateTimePicker2";
            this.dateTimePicker2.Size = new System.Drawing.Size(136, 20);
            this.dateTimePicker2.TabIndex = 2;
            // 
            // treeView1
            // 
            this.treeView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
            this.treeView1.Location = new System.Drawing.Point(12, 42);
            this.treeView1.Name = "treeView1";
            this.treeView1.Size = new System.Drawing.Size(1061, 451);
            this.treeView1.TabIndex = 3;
            // 
            // textBox1
            // 
            this.textBox1.Location = new System.Drawing.Point(406, 16);
            this.textBox1.Name = "textBox1";
            this.textBox1.Size = new System.Drawing.Size(100, 20);
            this.textBox1.TabIndex = 4;
            this.textBox1.Text = "MainObj";
            // 
            // checkBox1
            // 
            this.checkBox1.AutoSize = true;
            this.checkBox1.Location = new System.Drawing.Point(527, 19);
            this.checkBox1.Name = "checkBox1";
            this.checkBox1.Size = new System.Drawing.Size(80, 17);
            this.checkBox1.TabIndex = 5;
            this.checkBox1.Text = "checkBox1";
            this.checkBox1.UseVisualStyleBackColor = true;
            // 
            // button2
            // 
            this.button2.Location = new System.Drawing.Point(627, 12);
            this.button2.Name = "button2";
            this.button2.Size = new System.Drawing.Size(75, 23);
            this.button2.TabIndex = 6;
            this.button2.Text = "button2";
            this.button2.UseVisualStyleBackColor = true;
            this.button2.Click += new System.EventHandler(this.button2_Click);
            // 
            // WinformShowAuditFormU
            // 
            this.ClientSize = new System.Drawing.Size(1085, 505);
            this.Controls.Add(this.button2);
            this.Controls.Add(this.checkBox1);
            this.Controls.Add(this.textBox1);
            this.Controls.Add(this.treeView1);
            this.Controls.Add(this.dateTimePicker2);
            this.Controls.Add(this.dateTimePicker1);
            this.Controls.Add(this.button1);
            this.Name = "WinformShowAuditFormU";
            this.Text = "WinformShowAuditFormU";
            this.ResumeLayout(false);
            this.PerformLayout();

        }

        // *** End programmer edit section *** (Form Designer Initialize)
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                if ((components != null))
                {
                    components.Dispose();
                }
            }
            base.Dispose(disposing);
        }
    }
}
